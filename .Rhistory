runApp()
runApp()
df_phe <- readRDS(file = './data/rnaseq/ji/ji_phe.rds')
runApp()
runApp()
runApp()
runApp()
runApp()
getwd()
renv::restore()
renv::hydrate()
getwd()
library(shiny)
runApp()
library(plotly)
fig <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
fig
library(htmlwidgets)
library(plotly)
fig <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
fig
library(shiny)
runApp()
fig <- plot_ly(midwest, x = ~percollege, color = ~state, type = "box")
fig
runApp()
library(shiny)
runApp()
library(shiny)
library(shiny)
renv::restore()
renv::init()
library(shiny)
runApp()
runApp()
##### library#########
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
body <- dashboardBody(
tags$head(
tags$link(rel = "stylesheet", type = "text/css", href = "custom.css")
),
tabItems(
# Summary
tabItem(tabName = "summary",
box(width = NULL,
br(), br(),
DTOutput('summary'))),
# Intra batch qc metrics
tabItem(
tabName = "intra_batch",
fluidRow(
column(width = 3,
tabBox(width = NULL,
tabPanel(h5("Parameters"),
selectInput("qc_type_intra",
label = 'Intra QC Type',
choices = c('Detected_Gene', 'CV', 'SNR'),
selected = 'SNR'),
selectInput("group_a_intra",
label = 'Main Group',
choices = c('batch', 'libraryPrep', 'kit', 'lab'),
selected = 'batch'),
selectInput("barplot_r_legend_pos",
label = "Legend Position",
choices = c('v', 'h'),
selected = "v"),
selectInput("color_name_ji",
label = "Color",
choices = c('Set1', 'Set2', 'Set3',  'Paired', 'YlOrRd'),
selected = "Set1"),
sliderInput("bar_plot_xy_tickfont", "X & Y Tick Size",
min = 10, max = 30, value = 20, step = 1),
sliderInput("bar_plot_titlefont", "X & Y Title Font Size",
min = 10, max = 30, value = 20,  step = 1),
sliderInput("bar_plot_legend_labelsize", "Legend Labels Size",
min = 10, max = 30, value = 20, step = 1),
sliderInput("bar_plot_margin", "Margin",
min = 80, max = 200, value = 80, step = 5)))),
column(width = 9,
box(width = NULL, withSpinner(plotlyOutput("plot_intra_batch", height = contentHeight)))))),
#cross batch qc metrics
tabItem(
tabName = "cross_batch",
fluidRow(
column(width = 3,
tabBox(width = NULL,
tabPanel(h5("Parameters"),
selectInput("qc_type_cross",
label = 'Cross Batch QC Type',
choices = c('detect-JI', 'cor-fpkm', 'cor-fc', 'DEG-JI'),
selected = 'cor-fpkm'),
selectInput("group_a_cross",
label = 'Main Group',
choices = main_group,
selected = 'batch_type'),
selectInput("group_b",
label = 'Sub Group',
choices = main_group,
selected = 'libraryPrepA'),
selectizeInput("group_b_unit",
label = 'Element of Subgroup',
multiple = T,
choices = NULL),
sliderInput("cor_plot_xy_tickfont", "X & Y Tick Size",
min = 10, max = 30, value = 20, step = 1),
sliderInput("cor_plot_titlefont", "X & Y Title Font",
min = 10, max = 30, value = 20,  step = 1),
sliderInput("cor_plot_legend_labelsize", "Legend Labels Size",
min = 10, max = 30, value = 20, step = 1),
sliderInput("cor_plot_margin", "Margin",
min = 0, max = 200, value = 0, step = 5)))),
column(width = 9,
box(width = NULL, withSpinner(plotlyOutput("plot_qc_metric", height = contentHeight)))))),
#  Mendelian
tabItem(
tabName = "mendelian",
fluidRow(
column(width = 3,
tabBox(width = NULL,
tabPanel(h5("Parameters"),
selectInput("mendelian_variants_type",
label = 'Mendelian variants type',
choices = c('conflict.annotated', 'mendelian.violation.annotated', 'spanning_deletions.anno'),
selected = 'conflict.annotated.v'),
# selectInput("group_a_cross",
#             label = 'Main Group',
#             choices = main_group,
#             selected = 'batch_type'),
# selectInput("group_b",
#             label = 'Sub Group',
#             choices = main_group,
#             selected = 'libraryPrepA'),
# selectizeInput("group_b_unit",
#                label = 'Element of Subgroup',
#                multiple = T,
#                choices = NULL),
sliderInput("mendelian_plot_xy_size", "X & Y Tick Size",
min = 1, max = 30, value = 11, step = 1),
sliderInput("mendelian_plot_annotation_size", "Annotation_size",
min = 0, max = 5, value = 2.5,  step = 0.1),
sliderInput("mendelian_plot_margin", "Margin",
min = 0, max = 200, value = 20 , step = 5)))),
column(width = 9,
box(width = NULL, withSpinner(plotlyOutput("mendelian_plot", height = contentHeight)))))),
# Variant Quality
tabItem(
tabName = "variant_quality",
fluidRow(
column(width = 3,
tabBox(width = NULL,
tabPanel(h5("Parameters"),
selectInput("Variant_Quality_type",
label = 'Variant quality type',
choices = c('Small_variants_mapping_quality', 'Structural_variants_RE'),
selected = 'Small_variants_mapping_quality'),
selectInput("Variant_Quality_plot_his_type",
label = 'Histogram type',
choices = c('identity','stack','dodge'),
selected = 'identity'),
sliderInput("Variant_Quality_plot_his_height", "Histogram height",
min = 10, max = 200, value = 50, step = 10),
sliderInput("Variant_Quality_plot_xy_size", "X & Y Tick Size",
min = 1, max = 30, value = 13, step = 1),
sliderInput("Variant_Quality_plot_margin", "Margin",
min = 0, max = 200, value = 20 , step = 5)))),
column(width = 9,
box(width = NULL, withSpinner(plotlyOutput("Variant_Quality_plot", height = contentHeight)))))),
# diff region
tabItem(
tabName = "diff_region",
fluidRow(
column(width = 3,
tabBox(width = NULL,
tabPanel(h5("Parameters"),
selectInput("diff_region_variant_type",
label = 'Variant type',
choices = c('diff_region_snv', 'diff_region_sv'),
selected = 'diff_region_snv'),
# selectInput("Variant_Quality_plot_his_type",
#             label = 'Histogram type',
#             choices = c('identity','stack','dodge'),
#             selected = 'identity'),
# sliderInput("Variant_Quality_plot_his_height", "Histogram height",
#             min = 10, max = 200, value = 50, step = 10),
# sliderInput("Variant_Quality_plot_xy_size", "X & Y Tick Size",
#             min = 1, max = 30, value = 13, step = 1),
sliderInput("diff_region_plot_margin", "Margin",
min = 0, max = 200, value = 20 , step = 5)))),
column(width = 9,
box(width = NULL, withSpinner(plotlyOutput("diff_region_plot", width = "1200px",height = contentHeight)))))),
?plotlyOutput
# PCA SNR
tabItem(
tabName = "pca",
fluidRow(
column(width = 3,
tabBox(width = NULL,
tabPanel(h5("Parameters"),
materialSwitch(inputId = "d2_d3_switch", label = '2D/3D', status = 'success'),
selectInput("pca_zscore",
label = 'ZScore',
choices = c('YES', 'NO'),
selected = 'NO'),
selectInput("group_pca",
label = 'Main Group',
choices = pca_group,
selected = 'batch'),
selectizeInput("group_pca_unit",
label = 'Element of Main Group',
multiple = T,
choices = NULL),
selectInput("pca_r_legend_pos",
label = "Legend Position",
choices = c('v', 'h'),
selected = "v"),
sliderInput("pca_plot_xy_tickfont", "X & Y Tick Size",
min = 10, max = 30, value = 20, step = 1),
sliderInput("pca_plot_titlefont", "X & Y Title Font",
min = 10, max = 30, value = 20,  step = 1),
sliderInput("pca_plot_legend_labelsize", "Legend Labels Size",
min = 10, max = 30, value = 20, step = 1),
sliderInput("pca_plot_margin", "Margin",
min = 0, max = 200, value = 80, step = 5)))),
column(width = 9, box(width = NULL, withSpinner(plotlyOutput("plot_pca", height = contentHeight)))))),
# Reference dataset
tabItem(
tabName = "RD",
fluidRow(
column(width = 3,
tabBox(width = NULL,
tabPanel(h5("Parameters"),
selectInput("data_type",
label = 'Data Type',
choices = c('Detected_Gene_Distribution', 'Protocols_Consensus', 'Reference_Data_Gene_Type',
'Reference_dataset_Number_DEG', 'Reference_Data_DEG_Distribution',
'Performance_Evaluation_Gene_Detection', 'Performance_Evaluation_Reletive_Expression',
'Performance_Evaluation_DEG', 'QC_Metrics_Correlation'),
selected = 'QC_Metrics_Correlation'),
selectInput("barplot_r_legend_pos",
label = "Legend Position",
choices = c('v', 'h'),
selected = "v"),
selectInput("color_name_ji",
label = "Color",
choices = c('Set1', 'Set2', 'Set3',  'Paired', 'YlOrRd'),
selected = "Set1"),
sliderInput("bar_plot_xy_tickfont", "X & Y Tick Size",
min = 10, max = 30, value = 20, step = 1),
sliderInput("bar_plot_titlefont", "X & Y Title Font",
min = 10, max = 30, value = 20,  step = 1),
sliderInput("bar_plot_legend_labelsize", "Legend Labels Size",
min = 10, max = 30, value = 20, step = 1),
sliderInput("bar_plot_margin", "Margin",
min = 80, max = 200, value = 80, step = 5)))),
column(width = 9,
box(width = NULL, withSpinner(plotlyOutput("plot_RD", height = contentHeight))))))
))
?plotlyOutput
runApp()
runApp()
?box
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
?menuItem
runApp()
runApp()
##### library#########
library(shiny)
runApp()
runApp()
library("feather")
install.packages("feather")
library("feather")
install.packages("tibble")
library("feather")
install.packages("tibble")
##### library#########
library(shiny)
runApp()
runApp()
##### library#########
library(shiny)
runApp()
##### library#########
library(shiny)
runApp()
runApp()
runApp()
runApp()
?menuItem
runApp()
##### library#########
library(shiny)
runApp()
runApp()
library(shiny)
library(shinyjs)
library(shinydashboard)
library(shinycssloaders)
library(shinyWidgets)
library(magrittr)
library(markdown)
library(ggplot2)
library(plotly)
library(DT)
library(rlang)
library(RColorBrewer)
library(lattice)
library(scales)
library(plyr)
library(dplyr)
# new
library(feather)
library(heatmaply)
?heatmaply
##### library#########
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
renv::settings$snapshot.type("all")
renv::snapshot()
##### library#########
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
##### library#########
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
##### library#########
library(shiny)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
##### library#########
library(shiny)
runApp()
##### library#########
library(shiny)
runApp()
runApp()
runApp()
install.packages("dplyr")
install.packages("dplyr")
remove.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
devtools::install_github("tidyverse/dplyr")
install.packages("dplyr")
install.packages("askpass")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
install.packages("dplyr")
renv::init()
getwd()
install.packages("dplyr")
##### library#########
library(shiny)
runApp()
##### library#########
library(shiny)
runApp()
renv::init()
##### library#########
library(shiny)
runApp()
##### library#########
library(shiny)
runApp()
##### library#########
library(shiny)
runApp()
runApp()
##### library#########
library(shiny)
runApp()
##### library#########
library(shiny)
runApp()
##### library#########
library(shiny)
runApp()
install.packages("dashboardthemes")
install.packages("dashboardthemes")
?install.packages
getOption("repo")
install.packages("dashboardthemes",repos = "https://cloud.r-project.org")
library('dashboardthemes')
library(dashboardthemes)
##### library#########
library(shiny)
runApp()
##### library#########
library(shiny)
runApp()
##### library#########
library(shiny)
runApp()
runApp()
##### library#########
library(shiny)
runApp()
runApp()
##### library#########
library(shiny)
runApp()
renv::snapshot()
##### library#########
library(shiny)
runApp()
runApp()
?theme
?shinyDashboardThemes
runApp()
runApp()
runApp()
##### library#########
library(shiny)
runApp()
##### library#########
library(shiny)
runApp()
##### library#########
library(shiny)
runApp()
##### library#########
library(shiny)
runApp()
##### library#########
library(shiny)
runApp()
##### library#########
library(shiny)
runApp()
##### library#########
library(shiny)
runApp()
