#sever

shinyServer(function(input, output, session){
  #######################intra batch qc metrics#########################
  # df_intra_met <-  reactive(
  #   fread(file = paste('./data/rnaseq/qc_type/intra_batch/', input$qc_type_intra, '.txt', sep = ''))
  # )
  # 
  # ###figure
  # output$plot_intra_batch <- renderPlotly({
  #   ###parameter
  #   xaxis <- list(
  #     title = 'group',
  #     automargin = TRUE,
  #     tickfont =  list(size = input$bar_plot_xy_tickfont), 
  #     titlefont = list(size = input$bar_plot_titlefont)
  #   )
  #   
  #   yaxis_fre <- list(
  #     title = input$qc_type_intra,
  #     automargin = TRUE,
  #     tickfont =  list(size = input$bar_plot_xy_tickfont), 
  #     titlefont = list(size = input$bar_plot_titlefont)
  #   )
  #   box_title <- input$qc_type_intra
  #   legend <- list(orientation = input$barplot_r_legend_pos, font  = list(size = input$bar_plot_legend_labelsize))
  #   
  #   ###plot
  #   if(input$qc_type_intra == 'SNR'){
  #     df_intra_snr = df_intra_met()[, c("SNR", input$group_a_intra), with = F] %>% setnames(input$group_a_intra, "group")
  #     plot_ly(df_intra_snr, color = I("gray")) %>% 
  #       add_segments(x = ~group, xend = ~group, yend = 0, y = ~SNR, showlegend = FALSE) %>% 
  #       add_markers(x = ~group, y = ~SNR, name = input$group_a_intra, color = I("red"))  %>%
  #       layout(title = box_title, font = list(size = input$bar_plot_titlefont),  
  #              xaxis = xaxis, yaxis = yaxis_fre, legend = legend,  
  #              margin = list(l = input$bar_plot_margin, t = input$bar_plot_margin, 
  #                            r = input$bar_plot_margin,  b = input$bar_plot_margin))
  #     
  #   } else if (input$qc_type_intra == 'CV'){
  #     df_intra_cnv = df_intra_met()[, c("CV", "sample", input$group_a_intra), with = F] %>% setnames(input$group_a_intra, "group")
  #     df_intra_cnv$CV <- as.numeric(df_intra_cnv$CV)
  #     plot_ly(df_intra_cnv, x = ~group, y = ~CV, color = ~sample, type = "box") %>%
  #       layout(boxmode = "group")
  #     
  #   } else if (input$qc_type_intra == 'Detected_Gene'){
  #     df_intra_dtg = df_intra_met()[, c("n_rep", "sample", "N", input$group_a_intra), with = F] %>% setnames(input$group_a_intra, "group")
  #     print(head(df_intra_dtg))
  #     batch_list = unique(df_intra_met()[[input$group_a_intra]])
  #     fig_list = lapply(batch_list, make_subbar_plotly, df_intra_dtg)
  #     subplot(fig_list, nrows = 2, shareX = FALSE, shareY = TRUE, titleX = TRUE)
  #     
  #   }
  # }) 
  # 
  # #########################cross batch qc metrics########################
  # df_qc_met <-  reactive(
  #   readRDS(file = paste('./data/rnaseq/qc_type/cross_batch/', input$qc_type_cross, '.rds', sep = '')) %>% as.data.frame()
  # )
  # 
  # observe({
  #       qc_group_b  = unique(df_qc_met()[[input$group_b]])
  #       updateSelectInput(session, "group_b_unit",
  #                         choices = qc_group_b,
  #                         selected = tail(qc_group_b, 1))
  #   })
  # 
  # ###figure
  # output$plot_qc_metric <- renderPlotly({
  #   dt_qc = data.frame(df_qc_met(), stringsAsFactors = FALSE)
  #   
  #   
  #   ###parameter
  #   xaxis <- list(
  #     title = input$group_a_cross,
  #     automargin = TRUE,
  #     tickfont =  list(size = input$pca_plot_xy_tickfont), 
  #     titlefont = list(size = input$pca_plot_titlefont)
  #   )
  #   
  #   yaxis <- list(
  #     title = input$qc_type_cross,
  #     automargin = TRUE,
  #     tickfont =  list(size = input$pca_plot_xy_tickfont), 
  #     titlefont = list(size = input$pca_plot_titlefont)
  #   )
  #   
  #   box_title <- 'rna qc metrics'
  #   legend <- list(orientation = input$pca_r_legend_pos, font  = list(size = input$pca_plot_legend_labelsize))
  #   
  #   ###plot
  #   colnames(dt_qc)[c(which(colnames(dt_qc) == 'JI'), 
  #                     which(colnames(dt_qc) == 'Cor'), 
  #                     which(colnames(dt_qc) == 'JacardIndex'))] = 'value'
  #   group_b_num  = length(unique(dt_qc[, input$group_b]))
  #   colnames(dt_qc)[which(colnames(dt_qc) == input$group_a_cross)] = 'group_a'
  #   colnames(dt_qc)[which(colnames(dt_qc) == input$group_b)] = 'group_b'
  #   if(group_b_num == 1){
  #     
  #     plot_ly(dt_qc, x = ~group_a, y = ~value, type = 'violin', 
  #             box = list(visible = T), meanline = list(visible = F),
  #             color = ~input$group_a)
  #   } else if(group_b_num == 2){
  #     dt_qc %>%
  #       plot_ly(type = 'violin')  %>%
  #       add_trace(
  #         x = ~group_a[dt_qc[, 'group_b'] == input$group_b_unit[1]],
  #         y = ~value[dt_qc[, 'group_b'] == input$group_b_unit[1]],
  #         legendgroup = input$group_b_unit[1],
  #         scalegroup = input$group_b_unit[1],
  #         name = input$group_b_unit[1],
  #         side = 'negative',
  #         box = list(
  #           visible = T
  #         ),
  #         meanline = list(
  #           visible = F
  #         ),
  #         color = I("blue")) %>%
  #       add_trace(
  #         x = ~group_a[dt_qc[, 'group_b'] == input$group_b_unit[2]],
  #         y = ~value[dt_qc[, 'group_b'] == input$group_b_unit[2]],
  #         legendgroup = input$group_b_unit[2],
  #         scalegroup = input$group_b_unit[2],
  #         name = input$group_b_unit[2],
  #         side = 'positive',
  #         box = list(
  #           visible = T
  #         ),
  #         meanline = list(
  #           visible = F
  #         ),
  #         color = I("orange")
  #       )  %>%
  #       layout(
  #         xaxis = list(
  #           title = ""  
  #         ),
  #         yaxis = list(
  #           title = "",
  #           zeroline = F
  #         ),
  #         violingap = 0,
  #         violingroupgap = 0,
  #         violinmode = 'overlay'
  #       )
  #   } else if(group_b_num > 2){
  #     plot_ly(dt_qc, x = ~group_a, y = ~value, color = ~group_b, type = "box") %>%
  #     layout(boxmode = "group")
  #   }
  #   
  # })
  # 
  # #########################pca########################
  # observe({
  #   group_pca  = unique(df_exp_annot[[input$group_pca]])
  #   updateSelectInput(session, "group_pca_unit",
  #                     choices = group_pca,
  #                     selected = group_pca)
  # })
  # 
  # df_exp_annot_sub <-  reactive(
  #   df_exp_annot[input$group_pca_unit, on = input$group_pca][, c(input$group_pca, "logfpkm", "library", "gene"), with = F] %>%
  #     setnames(input$group_pca, "batch")
  # )
  # 
  # ###figure
  # output$plot_pca <- renderPlotly({
  # 
  #   if(input$pca_zscore == 'YES'){
  #     pca_list = pre_pca_snr(df_exp_annot_sub = df_exp_annot_sub(), dt_meta = dt_meta,
  #                            zscore_per_group = input$pca_zscore)
  #     mat_pca = pca_list[[1]]
  #     snr = pca_list[[2]]
  #     gene_num = pca_list[[3]]
  #     pro1 = pca_list[[4]]
  #     pro2 = pca_list[[5]]
  #     pro3 = pca_list[[6]]
  # 
  #   } else if (input$pca_zscore == 'NO') {
  #     pca_list = pre_pca_snr(df_exp_annot_sub = df_exp_annot_sub(), dt_meta = dt_meta,
  #                            zscore_per_group = input$pca_zscore)
  #     mat_pca = pca_list[[1]]
  #     snr = pca_list[[2]]
  #     gene_num = pca_list[[3]]
  #     pro1 = pca_list[[4]]
  #     pro2 = pca_list[[5]]
  #     pro3 = pca_list[[6]]
  #   }
  # 
  # 
  #   ###parameter
  #   xaxis <- list(
  #     title = paste("PC1 (", pro1*100,  "%)", sep = ""),
  #     automargin = TRUE,
  #     tickfont =  list(size = input$pca_plot_xy_tickfont),
  #     titlefont = list(size = input$pca_plot_titlefont)
  #   )
  # 
  #   yaxis <- list(
  #     title = paste("PC2 (", pro2*100,  "%)", sep = ""),
  #     automargin = TRUE,
  #     tickfont =  list(size = input$pca_plot_xy_tickfont),
  #     titlefont = list(size = input$pca_plot_titlefont)
  #   )
  # 
  #   zaxis <- list(
  #     title = paste("PC3 (", pro3*100,  "%)", sep = ""),
  #     automargin = TRUE,
  #     tickfont =  list(size = input$pca_plot_xy_tickfont),
  #     titlefont = list(size = input$pca_plot_titlefont)
  #   )
  # 
  # 
  #   box_title <-  paste('SNR = ', snr, '\n', '(N = ', gene_num, ")", sep = "")
  #   legend <- list(orientation = input$pca_r_legend_pos, font  = list(size = input$pca_plot_legend_labelsize))
  #   pal <- c("#4CC3D9", "#7BC8A4", "#FFC65D", "#F16745")
  # 
  #   ###plot
  #   if(input$d2_d3_switch == TRUE){
  #     plot_ly(data = mat_pca, x = ~PC1, y = ~PC2, z = ~PC3, color = ~sample, colors = pal, marker = list(size = 10),
  #             alpha = 1, symbol = ~symbol.batch, symbols = c('circle','triangle-up','square'), text = ~library) %>%
  #       layout(title = box_title, font = list(size = input$pca_plot_titlefont),
  #              xaxis = xaxis, yaxis = yaxis, zaxis = zaxis, legend = legend,
  #              margin = list(l = input$pca_plot_margin, t = input$pca_plot_margin,
  #                            r = input$pca_plot_margin,  b = input$pca_plot_margin))
  #   } else {
  #     plot_ly(data = mat_pca, x = ~PC1, y = ~PC2, color = ~sample, colors = pal, marker = list(size = 10),
  #             alpha = 1, symbol = ~symbol.batch, symbols = c('circle','triangle-up','square'), text = ~library) %>%
  #       layout(title = box_title, font = list(size = input$pca_plot_titlefont),
  #              xaxis = xaxis, yaxis = yaxis, legend = legend,
  #              margin = list(l = input$pca_plot_margin, t = input$pca_plot_margin,
  #                            r = input$pca_plot_margin,  b = input$pca_plot_margin))
  #   }
  # })
  # 
  # ##############################reference dataset##########################
  # df_dataset <-  reactive(
  #   fread(file = paste('./data/rnaseq/qc_type/reference_dataset/', input$data_type, '.txt', sep = ''))
  # )
  # 
  # ###figure
  # output$plot_RD <- renderPlotly({
  #   ###parameter
  #   xaxis <- list(
  #     title = 'group',
  #     automargin = TRUE,
  #     tickfont =  list(size = input$bar_plot_xy_tickfont), 
  #     titlefont = list(size = input$bar_plot_titlefont)
  #   )
  #   
  #   yaxis_fre <- list(
  #     title = input$data_type,
  #     automargin = TRUE,
  #     tickfont =  list(size = input$bar_plot_xy_tickfont), 
  #     titlefont = list(size = input$bar_plot_titlefont)
  #   )
  #   box_title <- input$data_type
  #   legend <- list(orientation = input$barplot_r_legend_pos, font  = list(size = input$bar_plot_legend_labelsize))
  #   
  #   #sample color
  #   pal <- c('#4CC3D9', '#7BC8A4', '#FFC65D', '#F16745')
  #   pal <- setNames(pal, c("D5", "D6", "F7", "M8"))
  #   
  #   ###plot
  #   if(input$data_type == "Detected_Gene_Distribution"){
  #     detect_gene_p <- df_dataset()[prot %in% "P"]
  #     detect_gene_r <- df_dataset()[prot %in% "R"]
  #     fig_p = plot_ly(detect_gene_p, x= ~length.Freq, y = ~name,  type = "funnel", color = ~sample, 
  #                     colors = pal) 
  #     fig_r = plot_ly(detect_gene_r, x= ~length.Freq, y = ~name,  type = "funnel", color = ~sample, 
  #                     colors = pal) 
  #     subplot(list(fig_p, fig_r), nrows = 2, shareX = FALSE, shareY = FALSE, titleX = TRUE)
  #     
  #   } else if (input$data_type == "Protocols_Consensus"){
  #     consensus_ratio_pos <- df_dataset()[type %in% "Detected"]
  #     consensus_ratio_neg<- df_dataset()[type %in% "Non-detected"]
  #     
  #     fig_pos = plot_ly(consensus_ratio_pos, x = ~sample, y = ~Protocol_independent, type = 'bar', name = 'Protocol independent', color = '#1f77b4', alpha = 1) %>% 
  #       add_trace(x = ~sample, y = ~PloyA_specific, name = 'PloyA specific', color = '#17becf', alpha = 0.5) %>%
  #       add_trace(x = ~sample, y = ~RiboZero_specific, name = 'RiboZero specific', color = 'blue', alpha = 0.1) %>%
  #       layout(yaxis = list(title = 'Count'), barmode = 'stack')
  #     
  #     fig_neg = plot_ly(consensus_ratio_neg, x = ~sample, y = ~Protocol_independent, type = 'bar', name = 'Protocol independent', color = '#1f77b4', alpha = 1) %>% 
  #       add_trace(x = ~sample, y = ~PloyA_specific, name = 'PloyA specific', color = '#17becf', alpha = 0.5) %>%
  #       add_trace(x = ~sample, y = ~RiboZero_specific, name = 'RiboZero specific', color = 'blue', alpha = 0.1) %>%
  #       layout(yaxis = list(title = 'Number'), barmode = 'stack')
  #     subplot(list(fig_pos, fig_neg), nrows = 1, shareX = FALSE, shareY = TRUE, titleX = TRUE)
  #     
  #   } else if (input$data_type == "Reference_Data_Gene_Type"){
  #     gene_type_pos <- df_dataset()[type %in% 'Pos']
  #     gene_type_pos_d <- dcast(gene_type_pos, Tier~biotype, value.var = "Ratio")
  #     gene_type_neg <- df_dataset()[type %in% 'Neg']
  #     gene_type_neg_d <- dcast(gene_type_neg, Tier~biotype, value.var = "Ratio")
  #     
  #     fig_detected = plot_ly(gene_type_pos_d, x = ~Tier, y = ~protein_coding, type = 'bar', name = 'protein_coding', color = '#4CC3D9', alpha = 1) %>% 
  #       add_trace(x = ~Tier, y = ~lncRNA, name = 'lncRNA', color = '#7BC8A4', alpha = 1) %>%
  #       add_trace(x = ~Tier, y = ~processed_pseudogene, name = 'processed_pseudogene', color = 'blue', alpha = 0.1) %>%
  #       add_trace(x = ~Tier, y = ~misc_RNA, name = 'misc_RNA', color = '#FFC65D', alpha = 1) %>%
  #       add_trace(x = ~Tier, y = ~miRNA, name = 'miRNA', color = '#F16745', alpha = 1) %>%
  #       add_trace(x = ~Tier, y = ~others, name = 'others', color = 'grey5', alpha = 1) %>%
  #       layout(yaxis = list(title = 'Ratio'), barmode = 'stack', xaxis = list(title = 'Detected'))
  #     
  #     fig_non_detected = plot_ly(gene_type_neg_d, x = ~Tier, y = ~protein_coding, type = 'bar', name = 'protein_coding', color = '#4CC3D9', alpha = 1) %>% 
  #       add_trace(x = ~Tier, y = ~lncRNA, name = 'lncRNA', color = '#7BC8A4', alpha = 1) %>%
  #       add_trace(x = ~Tier, y = ~processed_pseudogene, name = 'processed_pseudogene', color = 'blue', alpha = 0.1) %>%
  #       add_trace(x = ~Tier, y = ~misc_RNA, name = 'misc_RNA', color = '#FFC65D', alpha = 1) %>%
  #       add_trace(x = ~Tier, y = ~miRNA, name = 'miRNA', color = '#F16745', alpha = 1) %>%
  #       add_trace(x = ~Tier, y = ~others, name = 'others', color = 'grey5', alpha = 1) %>%
  #       layout(yaxis = list(title = 'Ratio'), barmode = 'stack', xaxis = list(title = 'Non-detected'))
  #     subplot(list(fig_detected, fig_non_detected), nrows = 1, shareX = FALSE, shareY = TRUE, titleX = TRUE)
  #     
  #   } else if (input$data_type == 'Reference_dataset_Number_DEG'){
  #     Reference_dataset_Number_DEG_d <- dcast(df_dataset(), compare_group~variable, value.var = 'value')
  #     plot_ly(Reference_dataset_Number_DEG_d, x = ~compare_group, y = ~DEGs, type = 'bar', name = 'reference DEG', color = '#1f77b4', alpha = 1) %>% 
  #       add_trace(x = ~compare_group, y = ~passp_padding, name = 'reference FC', color = '#17becf', alpha = 0.5) %>%
  #       add_trace(x = ~compare_group, y = ~raw_padding, name = 'reference detected gene', color = 'blue', alpha = 0.1) %>%
  #       layout(yaxis = list(title = 'Count'), barmode = 'stack', xaxis = list(title = 'sample pairs'))
  #     
  #   } else if (input$data_type == 'Reference_Data_DEG_Distribution'){
  #     deg_d5d6 <- df_dataset()[compare_group %in% 'D6/D5']
  #     deg_f7d5 <- df_dataset()[compare_group %in% 'F7/D5']
  #     deg_m8d5 <- df_dataset()[compare_group %in% 'M8/D5']
  #     deg_f7d6 <- df_dataset()[compare_group %in% 'F7/D6']
  #     deg_m8d6 <- df_dataset()[compare_group %in% 'M8/D6']
  #     deg_m8f7 <- df_dataset()[compare_group %in% 'M8/F7']
  #     fig1 <- plot_ly(deg_d5d6, x = ~abslog2FC, y = ~Value_mod, type = 'bar', name = 'D6/D5') %>%
  #       layout(yaxis = list(title = 'Number of DEGs'), xaxis = list(title = 'absolute of log2(D6/D5) value'))
  #     fig2 <- plot_ly(deg_f7d5, x = ~abslog2FC, y = ~Value_mod, type = 'bar', name = 'F7/D5')  %>%
  #       layout(yaxis = list(title = 'Number of DEGs'), xaxis = list(title = 'absolute of log2(F7/D5) value'))
  #     fig3 <- plot_ly(deg_m8d5, x = ~abslog2FC, y = ~Value_mod, type = 'bar', name = 'M8/D5')  %>%
  #       layout(yaxis = list(title = 'Number of DEGs'), xaxis = list(title = 'absolute of log2(M8/D5) value'))
  #     fig4 <- plot_ly(deg_f7d6, x = ~abslog2FC, y = ~Value_mod, type = 'bar', name = 'F7/D6')  %>%
  #       layout(yaxis = list(title = 'Number of DEGs'), xaxis = list(title = 'absolute of log2(F7/D6) value'))
  #     fig5 <- plot_ly(deg_m8d6, x = ~abslog2FC, y = ~Value_mod, type = 'bar', name = 'M8/D6')  %>%
  #       layout(yaxis = list(title = 'Number of DEGs'), xaxis = list(title = 'absolute of log2(M8/D6) value'))
  #     fig6 <- plot_ly(deg_m8f7, x = ~abslog2FC, y = ~Value_mod, type = 'bar', name = 'M8/F7') %>%
  #       layout(yaxis = list(title = 'Number of DEGs'), xaxis = list(title = 'absolute of log2(M8/F7) value'))
  #     
  #     subplot(list(fig1, fig2, fig3, fig4, fig5, fig6), nrows = 2, shareX = FALSE, shareY = FALSE, titleX = TRUE)
  #   } else if (input$data_type == 'Performance_Evaluation_Gene_Detection'){
  #     per_det_gene <- df_dataset()
  #     plot_ly(data = per_det_gene, x = ~Specificity_tier1, y = ~Sensitivity_tier1,  marker = list(size = 10),
  #             color = ~Batch, symbol = ~DataQual, symbols = c('circle','triangle-up','square'), text = ~File)
  #   } else if (input$data_type == 'Performance_Evaluation_Reletive_Expression'){
  #     per_rel_exp <- df_dataset()
  #     plot_ly(data = per_rel_exp, x = ~corr, y = ~consistent,  marker = list(size = 10),
  #             color = ~batch.y, symbol = ~DataQual, symbols = c('circle','triangle-up','square'), text = ~batch_pairs)
  #   } else if (input$data_type == 'Performance_Evaluation_DEG'){
  #     per_deg <- df_dataset()
  #     plot_ly(data = per_deg, x = ~Specificity, y = ~Sensitivity,  marker = list(size = 10),
  #             color = ~Batch, symbol = ~DataQual, symbols = c('circle','triangle-up','square'), text = ~Compare_group)
  #   } else if (input$data_type == 'QC_Metrics_Correlation') {
  #     metrics_corr <- as.matrix(cor(df_dataset(), method = "spearman"))
  #     fig <- plot_ly(
  #       x = rownames(metrics_corr), y = colnames(metrics_corr),
  #       z = metrics_corr, type = "heatmap", colors = colorRamp(c("blue", "white", "red"))) %>%
  #       layout(margin = list(l = 120))
  #   }
  # }) 
  
  ############################## Mendelian Violations##########################
  
  # df_mendelian <-  reactive(
  #   if(input$Mendelian_Violations_Quality == "Low Quality"){
  #     if(input$Mendelian_Violations_type1 == "All Quartet Sample"){
  #       readRDS('./data/DNAseq/Mendelian_Violations/Low_Quality/conflict.annotated.v.rds')
  #     }else if(input$Mendelian_Violations_type1 == "Spanning Deletions"){
  #       readRDS('./data/DNAseq/Mendelian_Violations/Low_Quality/spanning_deletions.anno.v.rds')
  #     }else if(input$Mendelian_Violations_type1 == "Detectable Mendelian Violations"){
  #       readRDS('./data/DNAseq/Mendelian_Violations/Low_Quality/mendelian.violation.annotated.v.rds')
  #     }
  #   }else if(input$Mendelian_Violations_Quality == "High Quality"){
  #     if(input$Mendelian_Violations_type2 == "Small Variants"){
  #       readRDS('./data/DNAseq/Mendelian_Violations/High_Quality/High_quality_Mendelian_Violations_SNV.rds')
  #     }else if(input$Mendelian_Violations_type2 == "Structural Variants"){
  #       readRDS('./data/DNAseq/Mendelian_Violations/High_Quality/High_quality_Mendelian_Violations_SV.rds')
  #     }
  #   }
  # )
  # 
  # output$mendelian_plot <- renderPlotly({
  #   if(input$Mendelian_Violations_Quality == "Low Quality"){
  #     p <-  ggplot(data=df_mendelian(), aes(x=region, y=percentage)) +
  #       geom_bar(stat="identity", fill="steelblue")+
  #       xlim(c("Simple Repeat","Satellite","SINE","LINE","LTR","Low Complexity","Segmental duplication","Centromere",
  #              "Tier1 DEL","Tier1 DEL breakpoint","Tier1 INS breakpoint"))+
  #       xlab("")+
  #       ylab("Percentage of Variants")+
  #       geom_text(aes(label=percentage), vjust= -0.5, color="black", size=input$mendelian_plot_annotation_size)+
  #       theme_classic()+theme(axis.text.x = element_text(angle=60,hjust=1,vjust=1,size = 11))+ # text on X axis
  #       theme(axis.text.y = element_text(size = input$mendelian_plot_xy_size))+
  #       theme(axis.title.y = element_text(size = input$mendelian_plot_xy_size))+
  #       theme(axis.text.y = element_text(size = input$mendelian_plot_xy_size))
  #     ggplotly(p) %>% layout(margin=list(l = input$mendelian_plot_margin, t = input$mendelian_plot_margin, 
  #                                        r = input$mendelian_plot_margin, b = input$mendelian_plot_margin))
  # 
  #   }else if(input$Mendelian_Violations_Quality == "High Quality"){
  #     if(input$Mendelian_Violations_type2 == "Small Variants"){
  #       p <- ggplot(df_mendelian(), aes(x=variable, y=value)) + 
  #         geom_bar(stat="identity", color="black", 
  #                  position=position_dodge()) +
  #         geom_errorbar(aes(ymin=value-sd, ymax=value+sd, width=.2)) +
  #         theme_bw()+
  #         theme(strip.text.x = element_text(size= input$mendelian_plot_xy_size, face="bold"),
  #               strip.text.y = element_text(size= input$mendelian_plot_xy_size, face="bold"))+
  #         xlab('') + 
  #         #xlim(c('satellite.1','simple_repeat.1','SINE.1','LINE.1','LTR.1','Low_complexity.1','SD.1','Telomere_5M.1','tier1.del.1','tier1.del.breakpoint.1','tier1.ins.breakpoint.1'))+
  #         ylab('Precentage of variants (%)')+
  #         theme(axis.text.x = element_text( color="black", 
  #                                           size= input$mendelian_plot_xy_size, angle=45,hjust=1,vjust=1),
  #               axis.text.y = element_text( color="black", 
  #                                           size= input$mendelian_plot_xy_size))+
  #         theme(axis.title.y = element_text(size = input$mendelian_plot_xy_size))+
  #         scale_x_discrete(limits=c("Satellite", "Simple Repeat", "SINE","LINE","LTR",
  #                                   "Low Complexity","Segmental Duplication","Telomere (5M)",
  #                                   "Tier1 DEL","Tier1 DEL breakpoint","Tier1 INS breakpoint"
  #         ))
  #       ggplotly(p) %>% layout(margin=list(l = input$mendelian_plot_margin, t = input$mendelian_plot_margin, 
  #                                          r = input$mendelian_plot_margin, b = input$mendelian_plot_margin))
  # 
  #     }else if(input$Mendelian_Violations_type2 == "Structural Variants"){
  #       p <- ggplot(df_mendelian(), aes(x=variable, y=value)) + 
  #         geom_bar(stat="identity", color="black", 
  #                  position=position_dodge()) +
  #         geom_errorbar(aes(ymin=value-sd, ymax=value+sd, width=.2)) +
  #         theme_bw()+
  #         theme(strip.text.x = element_text(size= input$mendelian_plot_xy_size, face="bold"),
  #               strip.text.y = element_text(size= input$mendelian_plot_xy_size, face="bold"))+
  #         xlab('') + 
  #         #xlim(c('satellite.1','simple_repeat.1','trf100bp.1','SINE.1','LINE.1','Low_complexity.1','SD.1','telomere.1'))+
  #         ylab('Precentage of variants (%)')+
  #         theme(axis.title.y = element_text(size = input$mendelian_plot_xy_size))+
  #         theme(axis.text.x = element_text( color="black", 
  #                                           size= input$mendelian_plot_xy_size, angle=45,hjust=1,vjust=1),
  #               axis.text.y = element_text( color="black", 
  #                                           size= input$mendelian_plot_xy_size))+
  #         scale_x_discrete(limits=c("Satellite", "Simple Repeat","Tandem Repeat ≥100bp",
  #                                   "SINE","LINE",
  #                                   "Low Complexity","Segmental Duplication","Telomere (5M)"
  #         ))
  #       ggplotly(p) %>% layout(margin=list(l = input$mendelian_plot_margin, t = input$mendelian_plot_margin, 
  #                                          r = input$mendelian_plot_margin, b = input$mendelian_plot_margin))
  #     }
  #   }
  # })

  
  
  
  ############################## Mendelian Violations##########################
  ########## add 4 figures
  
  df_mendelian <-  reactive(
    
    if(input$Mendelian_Violations =="Mendelian Violations Ratio"){
      if(input$Mendelian_Violations_type3=="SNV"){
        readRDS('./data/DNAseq/Mendelian_Violations/Mendelian_Violations_ratio/mendelian_ratio_SNV.rds')
      }else if(input$Mendelian_Violations_type3=="Indel"){
        readRDS('./data/DNAseq/Mendelian_Violations/Mendelian_Violations_ratio/mendelian_ratio_indel.rds')
      }else if(input$Mendelian_Violations_type3=="Deletion"){
        readRDS('./data/DNAseq/Mendelian_Violations/Mendelian_Violations_ratio/SV_mendelian_ratio_DEL.rds')
      }else if(input$Mendelian_Violations_type3=="Insertion"){
        readRDS('./data/DNAseq/Mendelian_Violations/Mendelian_Violations_ratio/SV_mendelian_ratio_INS.rds')
      }
    }else if(input$Mendelian_Violations =="Mendelian Violation Quality"){
      if(input$Mendelian_Violations_Quality == "Low Quality"){
        if(input$Mendelian_Violations_type1 == "All Quartet Sample"){
          readRDS('./data/DNAseq/Mendelian_Violations/Low_Quality/conflict.annotated.v.rds')
        }else if(input$Mendelian_Violations_type1 == "Spanning Deletions"){
          readRDS('./data/DNAseq/Mendelian_Violations/Low_Quality/spanning_deletions.anno.v.rds')
        }else if(input$Mendelian_Violations_type1 == "Detectable Mendelian Violations"){
          readRDS('./data/DNAseq/Mendelian_Violations/Low_Quality/mendelian.violation.annotated.v.rds')
        }
      }else if(input$Mendelian_Violations_Quality == "High Quality"){
        if(input$Mendelian_Violations_type2 == "Small Variants"){
          readRDS('./data/DNAseq/Mendelian_Violations/High_Quality/High_quality_Mendelian_Violations_SNV.rds')
        }else if(input$Mendelian_Violations_type2 == "Structural Variants"){
          readRDS('./data/DNAseq/Mendelian_Violations/High_Quality/High_quality_Mendelian_Violations_SV.rds')
        }
      }
      
      
      
    }
  )
  
  output$mendelian_plot <- renderPlotly({
    
    if(input$Mendelian_Violations =="Mendelian Violations Ratio"){
      if(input$Mendelian_Violations_type3=="SNV"){
        mendel_ratio_SV_SNV_plotly(df_mendelian(),
                                   titlesize=input$mendelian_title_size,  #15
                                   ytitle=input$mendelian_plot_xy_size,
                                   Title="SNV",
                                   Margin =input$mendelian_plot_margin,
                                   figHeight=input$mendelian_plot_figHeight,#0.5
                                   figMargin=input$mendelian_plot_figMargin, #0.01
                                   Showlegend=as.logical(input$mendelian_plot_Showlegend),# T
                                   variantType="SNV",
                                   Group = "Samples",
                                   Color = "library"
                                   )
      }else if(input$Mendelian_Violations_type3=="Indel"){
        mendel_ratio_SV_SNV_plotly(df_mendelian(),
                                   titlesize=input$mendelian_title_size,  #15
                                   ytitle=input$mendelian_plot_xy_size,
                                   Title="Indel",
                                   Margin =input$mendelian_plot_margin,
                                   figHeight=input$mendelian_plot_figHeight,#0.5
                                   figMargin=input$mendelian_plot_figMargin, #0.01
                                   Showlegend=as.logical(input$mendelian_plot_Showlegend),# T
                                   variantType="SNV",
                                   Group = "Samples",
                                   Color = "library"
        )

      }else if(input$Mendelian_Violations_type3=="Deletion"){
        mendel_ratio_SV_SNV_plotly(df_mendelian(),
                                   titlesize=input$mendelian_title_size,  #15
                                   ytitle=input$mendelian_plot_xy_size,
                                   Title="Deletion",
                                   Margin =input$mendelian_plot_margin,
                                   figHeight=input$mendelian_plot_figHeight,#0.5
                                   figMargin=input$mendelian_plot_figMargin, #0.01
                                   Showlegend=as.logical(input$mendelian_plot_Showlegend),# T
                                   variantType="SV",
                                   Group = "D5_pipelines",
                                   Color = "caller"
        )
        
      }else if(input$Mendelian_Violations_type3=="Insertion"){
        mendel_ratio_SV_SNV_plotly(df_mendelian(),
                                   titlesize=input$mendelian_title_size,  #15
                                   ytitle=input$mendelian_plot_xy_size,
                                   Title="Insertion",
                                   Margin =input$mendelian_plot_margin,
                                   figHeight=input$mendelian_plot_figHeight,#0.5
                                   figMargin=input$mendelian_plot_figMargin, #0.01
                                   Showlegend=as.logical(input$mendelian_plot_Showlegend),# T
                                   variantType="SV",
                                   Group = "D5_pipelines",
                                   Color = "caller"
        )
      }
      
    }else if(input$Mendelian_Violations =="Mendelian Violation Quality"){
      if(input$Mendelian_Violations_Quality == "Low Quality"){
        p <-  ggplot(data=df_mendelian(), aes(x=region, y=percentage)) +
          geom_bar(stat="identity", fill="steelblue")+
          xlim(c("Simple Repeat","Satellite","SINE","LINE","LTR","Low Complexity","Segmental duplication","Centromere",
                 "Tier1 DEL","Tier1 DEL breakpoint","Tier1 INS breakpoint"))+
          xlab("")+
          ylab("Percentage of Variants")+
          geom_text(aes(label=percentage), vjust= -0.5, color="black", size=input$mendelian_plot_annotation_size)+
          theme_classic()+theme(axis.text.x = element_text(angle=60,hjust=1,vjust=1,size = 11))+ # text on X axis
          theme(axis.text.y = element_text(size = input$mendelian_plot_xy_size))+
          theme(axis.title.y = element_text(size = input$mendelian_plot_xy_size))+
          theme(axis.text.y = element_text(size = input$mendelian_plot_xy_size))
        ggplotly(p) %>% layout(margin=list(l = input$mendelian_plot_margin, t = input$mendelian_plot_margin, 
                                           r = input$mendelian_plot_margin, b = input$mendelian_plot_margin))
        
      }else if(input$Mendelian_Violations_Quality == "High Quality"){
        if(input$Mendelian_Violations_type2 == "Small Variants"){
          p <- ggplot(df_mendelian(), aes(x=variable, y=value)) + 
            geom_bar(stat="identity", color="black", 
                     position=position_dodge()) +
            geom_errorbar(aes(ymin=value-sd, ymax=value+sd, width=.2)) +
            theme_bw()+
            theme(strip.text.x = element_text(size= input$mendelian_plot_xy_size, face="bold"),
                  strip.text.y = element_text(size= input$mendelian_plot_xy_size, face="bold"))+
            xlab('') + 
            #xlim(c('satellite.1','simple_repeat.1','SINE.1','LINE.1','LTR.1','Low_complexity.1','SD.1','Telomere_5M.1','tier1.del.1','tier1.del.breakpoint.1','tier1.ins.breakpoint.1'))+
            ylab('Precentage of variants (%)')+
            theme(axis.text.x = element_text( color="black", 
                                              size= input$mendelian_plot_xy_size, angle=45,hjust=1,vjust=1),
                  axis.text.y = element_text( color="black", 
                                              size= input$mendelian_plot_xy_size))+
            theme(axis.title.y = element_text(size = input$mendelian_plot_xy_size))+
            scale_x_discrete(limits=c("Satellite", "Simple Repeat", "SINE","LINE","LTR",
                                      "Low Complexity","Segmental Duplication","Telomere (5M)",
                                      "Tier1 DEL","Tier1 DEL breakpoint","Tier1 INS breakpoint"
            ))
          ggplotly(p) %>% layout(margin=list(l = input$mendelian_plot_margin, t = input$mendelian_plot_margin, 
                                             r = input$mendelian_plot_margin, b = input$mendelian_plot_margin))
          
        }else if(input$Mendelian_Violations_type2 == "Structural Variants"){
          p <- ggplot(df_mendelian(), aes(x=variable, y=value)) + 
            geom_bar(stat="identity", color="black", 
                     position=position_dodge()) +
            geom_errorbar(aes(ymin=value-sd, ymax=value+sd, width=.2)) +
            theme_bw()+
            theme(strip.text.x = element_text(size= input$mendelian_plot_xy_size, face="bold"),
                  strip.text.y = element_text(size= input$mendelian_plot_xy_size, face="bold"))+
            xlab('') + 
            #xlim(c('satellite.1','simple_repeat.1','trf100bp.1','SINE.1','LINE.1','Low_complexity.1','SD.1','telomere.1'))+
            ylab('Precentage of variants (%)')+
            theme(axis.title.y = element_text(size = input$mendelian_plot_xy_size))+
            theme(axis.text.x = element_text( color="black", 
                                              size= input$mendelian_plot_xy_size, angle=45,hjust=1,vjust=1),
                  axis.text.y = element_text( color="black", 
                                              size= input$mendelian_plot_xy_size))+
            scale_x_discrete(limits=c("Satellite", "Simple Repeat","Tandem Repeat ≥100bp",
                                      "SINE","LINE",
                                      "Low Complexity","Segmental Duplication","Telomere (5M)"
            ))
          ggplotly(p) %>% layout(margin=list(l = input$mendelian_plot_margin, t = input$mendelian_plot_margin, 
                                             r = input$mendelian_plot_margin, b = input$mendelian_plot_margin))
        }
      }
      
    }
    
    
  })
  
  

  ############################## variant quality ##########################
  df_Variant_Quality <-  reactive(
    #readRDS(file = paste('./data/DNAseq/Variant_Quality/', input$Variant_Quality_type, '.rds', sep = ''))
    if(input$Variant_Quality_type=="Small Variants"){
      read_feather('./data/DNAseq/Variant_Quality/Small_variants_mapping_quality.feather')
    }else{
      read_feather('./data/DNAseq/Variant_Quality/Structural_variants_RE.feather')
    }
    
  )
  output$Variant_Quality_plot <- renderPlotly({
    if(input$Variant_Quality_type=="Small Variants"){
      big_df<- df_Variant_Quality()
     # data.table::setnames(big_df,c("dp","af","gq","mq"),c("Depth","Allele Frequency","Genotype Quality","Mapping Quality"))
      colnames(big_df)[1:4] <-  c("Depth","Allele Frequency","Genotype Quality","Mapping Quality")
       p <- small_vaiant_quality(big_df,xfactor=input$Variant_Quality_distribution_type1,
                           axisxysize=input$Variant_Quality_plot_xy_size,
                           Xlab=input$Variant_Quality_distribution_type,
                           Bins=input$Variant_Quality_plot_his_height,
                           Position=input$Variant_Quality_plot_his_type
                           )
      ggplotly(p) %>% layout(margin=list(l = input$Variant_Quality_plot_margin, t = input$Variant_Quality_plot_margin, 
                                         r = input$Variant_Quality_plot_margin, b = input$Variant_Quality_plot_margin))
      
      
    }else{
      big_df<- df_Variant_Quality()
      #data.table::setnames(big_df,c("af","alt"),c("Allele Frequency","RE"))
      colnames(big_df)[c(10,8)] <- c("Allele Frequency","RE")
      p <- SV_quality(big_df,xfactor=input$Variant_Quality_distribution_type2,
                                axisxysize=input$Variant_Quality_plot_xy_size,
                                Xlab=input$Variant_Quality_distribution_type,
                                Bins=input$Variant_Quality_plot_his_height,
                                Position=input$Variant_Quality_plot_his_type
      )
      ggplotly(p) %>% layout(margin=list(l = input$Variant_Quality_plot_margin, t = input$Variant_Quality_plot_margin, 
                                         r = input$Variant_Quality_plot_margin, b = input$Variant_Quality_plot_margin))
    }

  })
  
  #######################Difficult Genomic Regions###############################
  
  df_diff_region <-  reactive(
    if(input$diff_region_variant_type == "Small Variants"){
      readRDS('./data/DNAseq/Difficult_Genomic_Regions/diff_region_snv.rds')
    }else{
      readRDS('./data/DNAseq/Difficult_Genomic_Regions/diff_region_sv.rds')
    }
  )
  output$diff_region_plot <- renderPlotly({
    if(input$diff_region_variant_type == "Small Variants"){
      
      p <- ggplot(df_diff_region(), aes(x=variable, y=(1-value) * 100, fill=Library)) +
        geom_boxplot()+
        scale_fill_manual(values=c("#8e0c24", "#587aa5"))+
        facet_grid(. ~ type)+
        xlim(c('satellite','simple_repeat','SINE','LINE','LTR','Low_complexity','SD','Telomere_5M','tier1.del.breakpoint','tier1.ins.breakpoint','high.confidence'))+
        theme_bw()+
        theme(strip.text.x = element_text(size=input$diff_region_plot_subtitle_size, face="bold"),
              strip.text.y = element_text(size=input$diff_region_plot_subtitle_size, face="bold"))+
        xlab('') + 
        ylab('Precentage of Mendelian Consistent')+
        theme(axis.text.x = element_text( color="black", 
                                          size=input$diff_region_plot_xy_size, angle=45,hjust=1,vjust=1),
              axis.text.y = element_text( color="black", 
                                          size=input$diff_region_plot_xy_size))
      ggplotly(p)%>%layout(boxmode = "group")%>% 
        layout(margin=list(l = input$diff_region_plot_margin, t = input$diff_region_plot_margin, 
                                         r = input$diff_region_plot_margin, b = input$diff_region_plot_margin))
      
    }else if(input$diff_region_variant_type == "Structural Variants"){
      p <- ggplot(df_diff_region(), aes(x=Region, y=Mendelian_rate * 100, fill=Caller)) +
        geom_boxplot()+
        facet_grid(. ~ SV)+
        xlim(c('Satellite','Simple_repeat','trf100bp','SINE','LINE','Low_complexity','SD','telomere','confidence'))+
        theme_bw()+
        theme(strip.text.x = element_text(size=input$diff_region_plot_subtitle_size, face="bold"),
              strip.text.y = element_text(size=input$diff_region_plot_subtitle_size, face="bold"))+
        xlab('') + 
        ylab('Precentage of Mendelian consistent (%)')+
        theme(axis.text.x = element_text( color="black", 
                                          size=input$diff_region_plot_xy_size, angle=45,hjust=1,vjust=1),
              axis.text.y = element_text( color="black", 
                                          size=input$diff_region_plot_xy_size))
      ggplotly(p)%>%layout(boxmode = "group")%>% 
        layout(margin=list(l = input$diff_region_plot_margin, t = input$diff_region_plot_margin, 
                           r = input$diff_region_plot_margin, b = input$diff_region_plot_margin))
      
    }
    
  })
  
  #######################Variant Validation###############################
  
  df_variant_validation <-  reactive(
    if(input$variant_validation_type == "Small Variant Validation"){
      readRDS('./data/DNAseq/Variant_Validation/snv_validation.rds')
    }else{
      readRDS('./data/DNAseq/Variant_Validation/sv_validation.rds')
    }
  )
  output$variant_validation_plot <- renderPlotly({
    if(input$variant_validation_type == "Small Variant Validation"){
  
      p <- ggplot(df_variant_validation(), aes(x=type, y=value * 100, fill=Library)) + 
        geom_bar(stat='identity', color="black", 
                 position=position_dodge()) +
        geom_errorbar(aes(ymin=(value-sd)*100, ymax=(value+sd)*100), width=.2,
                      position=position_dodge(.9)) +
        facet_grid(. ~ Region)+
        theme_bw()+
        theme(strip.text.x = element_text(size=input$variant_validation_subtitle_size, face="bold"),
              strip.text.y = element_text(size=input$variant_validation_subtitle_size, face="bold"))+
        xlab('') + 
        ylab('Precentage of variants validated by PMRA (%)')+
        scale_fill_manual(values=c("#8e0c24", "#587aa5"))+
        theme(axis.text.x = element_text( color="black", 
                                          size=input$variant_validation_xy_size, angle=45,hjust=1,vjust=1),
              axis.text.y = element_text( color="black", 
                                          size=input$variant_validation_xy_size))

      ggplotly(p)%>%
        layout(margin=list(l = input$variant_validation_margin, t = input$variant_validation_margin, 
                           r = input$variant_validation_margin, b = input$dvariant_validation_margin))
      
    }else if(input$variant_validation_type == "SV Validation"){
      
      p <- ggplot(df_variant_validation(), aes(x=SVTYPE, y=Validated_rate * 100, fill=Caller)) + 
        geom_bar(stat="identity", color="black", 
                 position=position_dodge()) +
        geom_errorbar(aes(ymin=(Validated_rate-sd)*100, ymax=(Validated_rate+sd)*100), width=.2,
                      position=position_dodge(.9)) +
        facet_grid(. ~ Region)+
        theme_bw()+
        theme(strip.text.x = element_text(size=input$variant_validation_subtitle_size, face="bold"),
              strip.text.y = element_text(size=input$variant_validation_subtitle_size, face="bold"))+
        xlab('') + 
        xlim(c('DEL','INS'))+
        ylab('Variants validated by other technologies (%)')+
        #  scale_fill_manual(values=c("#8e0c24", "#587aa5"))+
        theme(axis.text.x = element_text( color="black", 
                                          size=input$variant_validation_xy_size, angle=45,hjust=1,vjust=1),
              axis.text.y = element_text( color="black", 
                                          size=input$variant_validation_xy_size))
      ggplotly(p)%>%
        layout(margin=list(l = input$variant_validation_margin, t = input$variant_validation_margin, 
                           r = input$variant_validation_margin, b = input$variant_validation_margin))
      
    }
    
  })
  
  
  ####################### SV_Reference###############################

  df_SV_Reference <-  reactive(
    if(input$SV_Reference_type=="Summary"){
      readRDS(file = paste('./data/DNAseq/SV_Reference/Validation_Summary.rds')) 
    }else{
      readRDS(file = paste('./data/DNAseq/SV_Reference/Validation_detail.rds')) 
    }
  )
  
  output$SV_Reference_plot <- renderPlotly({
    if(input$SV_Reference_type=="Summary"){
      p <- ggplot(data=df_SV_Reference(), aes(x=type, y=value, fill=variable)) +
        geom_bar(stat="identity")+
        scale_fill_manual(values=c('#E69F00','#999999'))+
        theme_classic()+theme(axis.text.x = element_text(angle=60,hjust=1,vjust=1,size = input$SV_Reference_xy_size))+ # text on X axis
        theme(axis.text.y = element_text(size =  input$SV_Reference_xy_size))+
        theme(axis.title.y = element_text(size =  input$SV_Reference_xy_size))+
        theme( legend.title = element_blank())+
        theme(axis.title.x = element_blank())+
        theme(plot.title = element_text( face = "bold", #字体("plain", "italic", "bold", "bold.italic")
                                         colour = "black", #字体颜色
                                         size = 14,#字体大小
                                         hjust = .5, #调整轴标题1：纵轴靠上，横轴靠右；0.5居中；0：纵轴靠下，横轴靠左
                                         vjust = .5, #1：靠图边框；0靠近轴线；.5居中
                                         angle = 0 #为什么只对横轴标题有作用？
        ))
        
      ggplotly(p) %>%
        add_annotations(text=input$SV_Reference_legend_title, xref="paper", yref="paper",
                         x=1.03, xanchor="left",
                         y=0.8, yanchor="bottom",    # Same y as legend below
                         legendtitle=TRUE, showarrow=F ) %>%
        layout(legend=list(y=0.8, yanchor="top" ) )%>%
        layout(margin=list(l = input$SV_Reference_margin, t = input$SV_Reference_margin, 
                           r = input$SV_Reference_margin, b = input$SV_Reference_margin))
      
    }else {
      p <- ggplot(data=df_SV_Reference(), aes(x=type, y=value, fill=variable)) +
        geom_bar(stat="identity", position=position_dodge())+
        scale_fill_manual(values=c('#f15a57','#f2c46e','#83a4d7','#877dbb'))+
        theme_classic()+
        theme(axis.text.x = element_text(angle=60,hjust=1,vjust=1,size = input$SV_Reference_xy_size))+ # text on X axis
        theme(axis.text.y = element_text(size =  input$SV_Reference_xy_size))+
        theme(axis.title.y = element_text(size =  input$SV_Reference_xy_size))+
        theme(legend.title = element_blank())+
        theme(axis.title.x = element_blank())+
        theme(plot.title = element_text( face = "bold", #字体("plain", "italic", "bold", "bold.italic")
                                         colour = "black", #字体颜色
                                         size = 14,#字体大小
                                         hjust = .5, #调整轴标题1：纵轴靠上，横轴靠右；0.5居中；0：纵轴靠下，横轴靠左
                                         vjust = .5, #1：靠图边框；0靠近轴线；.5居中
                                         angle = 0 #为什么只对横轴标题有作用？
        ))
      
      ggplotly(p) %>%
        add_annotations(text=input$SV_Reference_legend_title, xref="paper", yref="paper",
                        x=1.03, xanchor="left",
                        y=0.8, yanchor="bottom",    # Same y as legend below
                        legendtitle=TRUE, showarrow=F ) %>%
        layout(legend=list(y=0.8, yanchor="top" ) )%>%
        layout(margin=list(l = input$SV_Reference_margin, t = input$SV_Reference_margin, 
                           r = input$SV_Reference_margin, b = input$SV_Reference_margin))
    }
    
    
  })
  
  
  ####################### Performance_Assessment###############################
  df_Performance_Assessment <-  reactive(
    if(input$PA_variant_type=="SNV"& input$PA_Performance=="Precision"){
      readRDS(file = paste('./data/DNAseq/Performance_Assessment/snv_precision_recall.rds')) 
    }else if(input$PA_variant_type=="SNV"& input$PA_Performance=="Reproducibility"){
      readRDS(file = paste('./data/DNAseq/Performance_Assessment/snv_mendelian_jaccard.rds')) 
    }else if(input$PA_variant_type=="SV"& input$PA_Performance=="Precision"){
      readRDS(file = paste('./data/DNAseq/Performance_Assessment/sv_precision_recall.rds')) 
    }else{
      readRDS(file = paste('./data/DNAseq/Performance_Assessment/sv_mendelian_jaccard.rds')) 
    }
  )
  output$Performance_Assessment_plot <- renderPlotly({
    subp <- function(){ 
      subplot(
        pp2, 
        plotly_empty(), 
        ggplotly(pmain),
        pp1,
        nrows = 2, heights = c(input$PA_porportion,1-input$PA_porportion),
        widths = c(1-input$PA_porportion, input$PA_porportion), 
        margin = 0,
        shareX = T, shareY = T, titleX =T, titleY = T
      ) %>%  
        layout(margin=list(l = input$PA_margin, t = input$PA_margin,
                           r = input$PA_margin, b = input$PA_margin))
    }
    dat <- df_Performance_Assessment()
    if(input$PA_variant_type=="SNV"& input$PA_Performance=="Precision"){
      pmain <- ggplot(dat, aes(x = METRIC.Precision, y = METRIC.Recall, color = library))+
        geom_point(aes(shape=Type))+
        scale_color_manual(values=c("#8e0c24", "#587aa5"))+
        scale_shape_manual(values=c(1,2,3,4,5,6,7,8,9,10,11))+ 
        theme_bw()+
        theme(legend.title = element_blank())+
        labs(x="Precision",y="Recall")
      # Marginal densities along x axis
      pp1 <- plot_ly(dat,
                     x = ~library,
                     y = ~ METRIC.Recall,
                     color = ~library,
                     colors =c("#8e0c24", "#587aa5"),
                     type='box',showlegend = FALSE) %>% 
        layout(xaxis=list(title = ""),yaxis=list(title = "Recall"))
      
      pp2 <- plot_ly(dat,
                     x = ~METRIC.Precision,
                     y = ~ library,
                     color = ~library,
                     colors =c("#8e0c24", "#587aa5"),
                     type='box' ) %>% 
        layout(xaxis=list(title="Precision"),yaxis=list(title = ""))
      subp()
      
    }else if(input$PA_variant_type=="SNV"& input$PA_Performance=="Reproducibility"){
      pmain <- ggplot(dat, aes(x = reproducibility, y = mendelian, color = library))+
        geom_point(aes(shape=type))+
        scale_color_manual(values=c("#8e0c24", "#587aa5"))+
        scale_shape_manual(values=c(1,2,3,4,5,6,7,8,9,10,11))+ 
        theme_bw()+
        theme(legend.title = element_blank())+
        labs(x="Reproducibility between twins",y="Mendelian concordant ratio")
      pp1 <- plot_ly(dat,
                     x = ~type,
                     y = ~ mendelian,
                     color = ~type,
                     colors =c("#8e0c24", "#587aa5"),
                     type='box' ) %>% 
        layout(xaxis=list(title=""),yaxis=list(title = "Mendelian concordant ratio"))
      pp2 <- plot_ly(dat,
                     x = ~reproducibility,
                     y = ~type,
                     color = ~type,
                     colors =c("#8e0c24", "#587aa5"),
                     type='box',showlegend = FALSE) %>% 
        layout(xaxis=list(title = "Reproducibility between twins"),yaxis=list(title = ""))
       subp()
      
    }else if(input$PA_variant_type=="SV"& input$PA_Performance=="Precision"){
      pmain <-  ggplot(dat, aes(x = Precision, y = Recall, color = caller))+
        geom_point(aes(shape=Pipelines))+
        scale_shape_manual(values=c(1,2,3,4,5,6,7,8,9,10,11))+ 
        theme_bw()+
        theme(legend.title = element_blank())+
        labs(x="Precision",y="Recall")
      # Marginal densities along x axis
      pp2 <- plot_ly(dat,
                     x = ~Precision,
                     y = ~ caller,
                     color = ~caller,
                     #colors =c("#8e0c24", "#587aa5"),
                     type='box',showlegend = FALSE) %>% 
        layout(xaxis=list(title = "Precision"),yaxis=list(title = ""))
      pp1 <- plot_ly(dat,
                     x = ~caller,
                     y = ~ Recall,
                     color = ~caller,
                     # colors =c("#8e0c24", "#587aa5"),
                     type='box' ) %>% 
        layout(xaxis=list(title=" "),yaxis=list(title = "Recall"))
      subp()
    }else{
      pmain <-  ggplot(dat, aes(x = Jaccard.index, y = Mendelian.Rate, color = caller))+
        geom_point(aes(shape=Pipelines))+
        scale_shape_manual(values=c(1,2,3,4,5,6,7,8,9,10,11))+ 
        theme_bw()+
        theme(legend.title = element_blank())+
        labs(x="Reproducibility between twins",y="Mendelian concordant ratio")
      pp2 <- plot_ly(dat,
                     x = ~Jaccard.index,
                     y = ~caller,
                     color = ~caller,
                     #colors =c("#8e0c24", "#587aa5"),
                     type='box',showlegend = FALSE) %>% 
        layout(xaxis=list(title = "Reproducibility between twins"),yaxis=list(title = ""))
      pp1 <- plot_ly(dat,
                     x = ~caller,
                     y = ~ Mendelian.Rate,
                     color = ~caller,
                     #colors =c("#8e0c24", "#587aa5"),
                     type='box' ) %>% 
        layout(xaxis=list(title=""),yaxis=list(title = "Mendelian concordant ratio"))
      subp()
      }
  })
  
  
  ####################### Variant_Statistics###############################
  
  df_Variant_Statistics <- reactive(
    if(input$Variant_Statistics_type=="SNV"){
      readRDS('./data/DNAseq/Variant_Statistics/snv_statistics.rds')
    }else{
      readRDS('./data/DNAseq/Variant_Statistics/sv_statistics.rds')
    }
  )
  output$Variant_Statistics_plot <- renderPlotly({
    if(input$Variant_Statistics_type=="SNV"){
      dat_long <-  df_Variant_Statistics()
      colfunc <- colorRampPalette(c("#c6ffdd","#fbd786","#f7797d"))
      h1 <- ggplot(data= df_Variant_Statistics(), 
                   aes(x=plot_order, y=value, fill=variable)) +
        geom_bar(stat="identity")+
        scale_fill_manual(values=colfunc(30))+
        theme_bw()+
        theme(axis.text.x = element_blank(),
              axis.title.x=element_blank(),
              axis.text.y = element_text(size = 13,face = "bold",color = 'black'))+
        theme(legend.position = "none")+
        labs(y="Small Variants Number(million)")
      
      h2 <- ggplot(dat_long)+
        geom_bar(mapping = aes(x = plot_order, y = 1, fill = Library), 
                 stat = "identity", 
                 width = 1)+
        scale_fill_manual(values=c('#8e0c24','#587aa5'))+
        theme_void()+
        #facet_grid(~Quartet.Sample, scales = 'free_x', space = 'free_x')+
        theme(strip.background = element_blank(), strip.text = element_blank())+
        theme(panel.spacing.x = unit(1, "mm"))+
        theme(legend.position = "none")
    
      h3 <- ggplot(dat_long)+
        geom_bar(mapping = aes(x = plot_order, y = 1, fill = Sequence.Platform), 
                 stat = "identity", 
                 width = 1)+
        theme_void()+
        scale_fill_manual(values=c("#1B9E77","#D95F02","#7570B3","#E7298A"))+
        #facet_grid(~Quartet.Sample, scales = 'free_x', space = 'free_x')+
        theme_void()+
        theme(strip.background = element_blank(), strip.text = element_blank())+
        theme(panel.spacing.x = unit(1, "mm"))+
        theme(legend.position = "none")
  
      h4 <- ggplot(dat_long)+
        geom_bar(mapping = aes(x = plot_order, y = 1, fill = Sequence.Site), 
                 stat = "identity", 
                 width = 1)+
        scale_fill_manual(values=c("#E41A1C","#377EB8","#4DAF4A","#984EA3","#FF7F00","#FFFF33" ))+
        theme_void()+
        #facet_grid(~Quartet.Sample, scales = 'free_x', space = 'free_x')+
        theme(strip.background = element_blank(), strip.text = element_blank())+
        theme(panel.spacing.x = unit(1, "mm"))+
        theme(legend.position = "none")+
        theme(legend.position = "none")
   
      h6 <- ggplot(dat_long)+
        geom_bar(mapping = aes(x = plot_order, y = 1, fill = Mean.Deduped.Coverage), 
                 stat = "identity", 
                 width = 1)+
        theme_void()+
        theme(strip.background = element_blank(), strip.text = element_blank())+
        #facet_grid(~Quartet.Sample, scales = 'free_x', space = 'free_x')+
        scale_fill_gradient2(low = "green", 
                             mid = "yellow",
                             high = "red", 
                             midpoint = median(dat_long$Mean.Deduped.Coverage)) + 
        theme(panel.spacing.x = unit(1, "mm"))+
        theme(legend.position = "none")
      
      figH <- input$Variant_Statistics_figH
      figH1 <- (1-figH)/4
      
      subplot(ggplotly(h1),ggplotly(h6),ggplotly(h4),ggplotly(h3),ggplotly(h2),
              nrows = 5,
              heights = c(figH,figH1,figH1,figH1,figH1),
              margin=input$Variant_Statistics_fig_margin)%>% 
        layout(margin=list(l = input$Variant_Statistics_margin, 
                           t = input$Variant_Statistics_margin, 
                           r =input$Variant_Statistics_margin, 
                           b = input$Variant_Statistics_margin)) %>% 
        layout(showlegend = as.logical(input$Variant_Statistics_showlegend)) %>% 
        layout(yaxis=list(title="Small Variants Number(million)",
                          titlefont = list(size = input$Variant_Statistics_yaxisfont)
        )) 

    }else{
      dat_long <-  df_Variant_Statistics()
      colfunc <- colorRampPalette(c("#c6ffdd","#fbd786","#f7797d"))
      h1 <- ggplot(data=dat_long, aes(x=plot_order, y=value, fill=variable)) +
        geom_bar(stat="identity",color="grey")+
        scale_fill_manual(values=colfunc(30))+
        theme_bw()+
        theme(axis.text.x = element_blank(),
              axis.title.x=element_blank(),
              axis.text.y = element_text(size = 13,face = "bold",color = 'black'))+
        theme(legend.position = "none")

      h4 <- ggplot(dat_long)+
        geom_bar(mapping = aes(x = plot_order, y = 1, fill = caller), 
                 stat = "identity", 
                 width = 1)+
        scale_fill_brewer(palette="Paired")+
        theme_void()+
        theme(legend.position = "none")+
        theme(panel.spacing.x = unit(1, "mm"))
      
      h3 <- ggplot(dat_long)+
        geom_bar(mapping = aes(x = plot_order, y = 1, fill = mapper), 
                 stat = "identity", 
                 width = 1)+
        scale_fill_brewer(palette="Set1")+
        theme_void()+
        theme(legend.position = "none")+
        theme(panel.spacing.x = unit(1, "mm"))
      
      h2 <- ggplot(dat_long)+
        geom_bar(mapping = aes(x = plot_order, y = 1, fill = platform), 
                 stat = "identity", 
                 width = 1)+
        theme_void()+
        theme(legend.position = "none")+
        theme(panel.spacing.x = unit(1, "mm"))
      
      
      figH <- input$Variant_Statistics_figH
      figH1 <- (1-figH)/3
      subplot(ggplotly(h1),ggplotly(h4),ggplotly(h3),ggplotly(h2),
              nrows = 4,
              heights = c(figH,figH1,figH1,figH1),
              margin=input$Variant_Statistics_fig_margin)%>% 
        layout(margin=list(l = input$Variant_Statistics_margin, 
                           t = input$Variant_Statistics_margin, 
                           r =input$Variant_Statistics_margin, 
                           b = input$Variant_Statistics_margin)) %>% 
        layout(showlegend = as.logical(input$Variant_Statistics_showlegend)) %>% 
        layout(yaxis=list(title="Structural Variants Number",
                          titlefont = list(size = input$Variant_Statistics_yaxisfont)
        ))
    }
  
  })
  
  
  
  ####################### Jaccard_Index ###############################
  df_Jaccard_Index <- reactive(
    if(input$Jaccard_Index_type=="SNV"){
      read.table('./data/DNAseq/Jaccard_Index/small_variants_snv_jaccard_index.txt')
    }else if(input$Jaccard_Index_type=="INDEL"){
      read.table('./data/DNAseq/Jaccard_Index/small_variants_indel_jaccard_index.txt')
    }else if(input$Jaccard_Index_type=="Insertion"){
      read.table('./data/DNAseq/Jaccard_Index/sv_ins.txt')
    }else if(input$Jaccard_Index_type=="Deletion"){
      read.table('./data/DNAseq/Jaccard_Index/sv_del.txt')
    }else if(input$Jaccard_Index_type=="Duplication"){
      read.table('./data/DNAseq/Jaccard_Index/sv_dup.txt')
    }else if(input$Jaccard_Index_type=="Inversion"){
      read.table('./data/DNAseq/Jaccard_Index/sv_inv.txt')
    }else if(input$Jaccard_Index_type=="Breakend"){
      read.table('./data/DNAseq/Jaccard_Index/sv_bnd.txt')
    }
  )
  output$Jaccard_Index_plot <- renderPlotly({
    if(input$Jaccard_Index_type=="SNV"){
    heatmaply_SNV(df_Jaccard_Index(),
                  #Plot_method=input$Jaccard_Index_Plot_method, #ggplot,plotly
                  Margin= input$Jaccard_Index_margin,
                  Key.title = input$Jaccard_Index_legend_title,
                  Main = "SNV")
    }else if(input$Jaccard_Index_type=="INDEL"){
      heatmaply_SNV(df_Jaccard_Index(),
                    Margin=input$Jaccard_Index_margin,
                    Key.title = input$Jaccard_Index_legend_title,
                    Main = "INDEL")
    }else if(input$Jaccard_Index_type=="Insertion"){
      heatmaply_SV(df_Jaccard_Index(),
                   Margin= input$Jaccard_Index_margin,
                   Key.title = input$Jaccard_Index_legend_title,
                    Main = "Insertion")
    }else if(input$Jaccard_Index_type=="Deletion"){
      heatmaply_SV(df_Jaccard_Index(),
                   Key.title = input$Jaccard_Index_legend_title,
                   Margin= input$Jaccard_Index_margin,
                   Main = "Deletion")
    }else if(input$Jaccard_Index_type=="Duplication"){
      heatmaply_SV(df_Jaccard_Index(),
                   Key.title = input$Jaccard_Index_legend_title,
                   Margin= input$Jaccard_Index_margin,
                   Main = "Duplication")
    }else if(input$Jaccard_Index_type=="Inversion"){
      heatmaply_SV(df_Jaccard_Index(),
                   Key.title = input$Jaccard_Index_legend_title,
                   Margin= input$Jaccard_Index_margin,
                   Main = "Inversion")
    }else if(input$Jaccard_Index_type=="Breakend"){
      heatmaply_SV(df_Jaccard_Index(),
                   Key.title = input$Jaccard_Index_legend_title,
                   Margin= input$Jaccard_Index_margin,
                   Main = "Breakend")
    }
  })
  
  
  ####################### Quartet Advantage###############################
  df_Quartet_Advantage<-  reactive(
    if(input$Quartet_Advantage_type=="Small variants"){
      readRDS('./data/DNAseq/Quartet_Advantage/quartet_advantage_SNV.rds')
    }else{
      readRDS('./data/DNAseq/Quartet_Advantage/quartet_advantage_SV.rds')
    }
  )
  
  output$Quartet_Advantage_plot <- renderPlotly({
    if(input$Quartet_Advantage_type=="Small variants"){
      p <- ggplot(data=df_Quartet_Advantage(), aes(x=variable, y=value, fill=variable)) +
        geom_boxplot(fill="gray")+
        theme_classic()+
        theme(axis.text.x = element_text(size = input$Quartet_Advantage_xy_size))+ # text on X axis
        theme(axis.text.y = element_text(size = input$Quartet_Advantage_xy_size))+
        theme(axis.title.y = element_text(size = input$Quartet_Advantage_xy_size))+
        theme(axis.title.x = element_text(size = input$Quartet_Advantage_xy_size))+
        labs(title="Small variants",x=" ",y="Potential sequence errors (%)")+
        #theme(axis.title.y = element_text(size = 13))+
        theme(plot.title = element_text( face = "bold", #字体("plain", "italic", "bold", "bold.italic")
                                         colour = "black", #字体颜色
                                         size = input$Quartet_Advantage_title_size,#字体大小
                                         hjust = .5, #调整轴标题1：纵轴靠上，横轴靠右；0.5居中；0：纵轴靠下，横轴靠左
                                         vjust = .5, #1：靠图边框；0靠近轴线；.5居中
                                         angle = 0 #为什么只对横轴标题有作用？
        ))
      ggplotly(p)%>% layout(margin=list(l = input$Quartet_Advantage_margin, t = input$Quartet_Advantage_margin, 
                                         r = input$Quartet_Advantage_margin, b = input$Quartet_Advantage_margin))
      
   }else {
     p <- ggplot(data=df_Quartet_Advantage(), aes(x=variable, y=value, fill=variable)) +
       geom_boxplot(fill="gray")+
       theme_classic()+
       theme(axis.text.x = element_text(size = input$Quartet_Advantage_xy_size))+ # text on X axis
       theme(axis.text.y = element_text(size = input$Quartet_Advantage_xy_size))+
       theme(axis.title.y = element_text(size = input$Quartet_Advantage_xy_size))+
       theme(axis.title.x = element_text(size = input$Quartet_Advantage_xy_size))+
       labs(title="Structural variants",x=" ",y="Potential sequence errors (%)")+
       #theme(axis.title.y = element_text(size = 13))+
       theme(plot.title = element_text( face = "bold", #字体("plain", "italic", "bold", "bold.italic")
                                        colour = "black", #字体颜色
                                        size = input$Quartet_Advantage_title_size,#字体大小
                                        hjust = .5, #调整轴标题1：纵轴靠上，横轴靠右；0.5居中；0：纵轴靠下，横轴靠左
                                        vjust = .5, #1：靠图边框；0靠近轴线；.5居中
                                        angle = 0 #为什么只对横轴标题有作用？
       ))
     ggplotly(p)%>% layout(margin=list(l = input$Quartet_Advantage_margin, t = input$Quartet_Advantage_margin, 
                                       r = input$Quartet_Advantage_margin, b = input$Quartet_Advantage_margin))
    }
    
    
  })
  
  
  ####################### Small_Variants_Distribution###############################
  df_Small_Variants_Distribution<- reactive(
  read_feather("./data/DNAseq/Small_Variants_Distribution/Small_Variants_Distribution.feather")
  )
  
  output$Small_Variants_Distribution_plot <- renderPlotly({
    snv_distri_plotly(df_Small_Variants_Distribution(),
                      xfactor=input$Small_Variants_Distribution_type,
                      Xlab=input$Small_Variants_Distribution_type,
                      axisxysize=input$Small_Variants_Distribution_xy_size,
                      Margin=input$Small_Variants_Distribution_margin
                      )
  })
  
  
  #######################Reference Datasets Summary###############################
  
  df_Reference_Datasets_Summary <- reactive(
    if(input$Reference_Datasets_Summary_type=="Small Variants"){
      readRDS('./data/DNAseq/Reference_Datasets_Summary/small_variant_reference_summary.rds')
    }else{
      readRDS('./data/DNAseq/Reference_Datasets_Summary/structral_variant_reference_summary.rds')
    }
  )
  
  output$Reference_Datasets_Summary_plot <- renderPlotly({
    if(input$Reference_Datasets_Summary_type=="Small Variants"){
      dat_long <- df_Reference_Datasets_Summary()
      h1 <- ggplot(data=dat_long, aes(x=plot_order, y=value, fill=variable)) +
        geom_bar(stat="identity",color="black")+
        scale_fill_brewer(palette="Paired")+
        facet_grid(~Quartet.Sample, scales = 'free_x', space = 'free_x')+
        theme(strip.background = element_blank(),strip.text.x = element_blank())+
        theme_tufte()+
        labs(y="Variants Number(million)")+
        theme(legend.position = "none")+
        theme(axis.text.x = element_blank(),
              axis.title.x=element_blank(),
              axis.text.y = element_text(size = 13,face = "bold",color = 'black'))
    
      h2 <- ggplot(dat_long)+
        geom_bar(mapping = aes(x = plot_order, y = 1, fill = Library), 
                 stat = "identity", 
                 width = 1)+
        scale_fill_manual(values=c('#8e0c24','#587aa5'))+
        theme_void()+
        facet_grid(~Quartet.Sample, scales = 'free_x', space = 'free_x')+
        theme(strip.background = element_blank(),strip.text.x = element_blank())+
        theme(panel.spacing.x = unit(1, "mm"))+
        theme(legend.position = "none")

      h3 <- ggplot(dat_long)+
        geom_bar(mapping = aes(x = plot_order, y = 1, fill = Sequence.Platform), 
                 stat = "identity", 
                 width = 1)+
        theme_void()+
        scale_fill_manual(values=c("#1B9E77","#D95F02","#7570B3","#E7298A"))+
        facet_grid(~Quartet.Sample, scales = 'free_x', space = 'free_x')+
        theme_void()+
        theme(strip.background = element_blank(),strip.text.x = element_blank())+
        theme(panel.spacing.x = unit(1, "mm"))+
        theme(legend.position = "none")

      h4 <- ggplot(dat_long)+
        geom_bar(mapping = aes(x = plot_order, y = 1, fill = Sequence.Site), 
                 stat = "identity", 
                 width = 1)+
        scale_fill_manual(values=c("#E41A1C","#377EB8","#4DAF4A","#984EA3","#FF7F00","#FFFF33" ))+
        theme_void()+
        facet_grid(~Quartet.Sample, scales = 'free_x', space = 'free_x')+
        theme(strip.background = element_blank(),strip.text.x = element_blank())+
        theme(panel.spacing.x = unit(1, "mm"))+
        theme(legend.position = "none")

      h5 <- ggplot(dat_long)+
        geom_bar(mapping = aes(x = plot_order, y = 1, fill = Quartet.Sample), 
                 stat = "identity", 
                 width = 1)+
        theme_void()+
        scale_fill_manual(values=c('#4cc3d9','#7bc8a4','#ffc65d','#f16745'))+
        theme(strip.background = element_blank(),strip.text.x = element_blank())+
        facet_grid(~Quartet.Sample, scales = 'free_x', space = 'free_x')+
        theme(panel.spacing.x = unit(1, "mm"))+
        theme(legend.position = "none")

      h6 <- ggplot(dat_long)+
        geom_bar(mapping = aes(x = plot_order, y = 1, fill = Mean.Deduped.Coverage), 
                 stat = "identity", 
                 width = 1)+
        theme_void()+
        theme(strip.background = element_blank(), strip.text.x = element_blank())+
        facet_grid(~Quartet.Sample, scales = 'free_x', space = 'free_x')+
        scale_fill_gradient2(low = "green", 
                             mid = "yellow",
                             high = "red", 
                             midpoint = median(dat_long$Mean.Deduped.Coverage)) + 
        theme(panel.spacing.x = unit(1, "mm"))+
        theme(legend.position = "none")
 
      figH <- input$Reference_Datasets_Summary_figH
      figH1 <- (1-input$Reference_Datasets_Summary_figH)/5
      
      subplot(ggplotly(h1),ggplotly(h6),ggplotly(h5),ggplotly(h4),ggplotly(h3),ggplotly(h2),
              nrows = 6,heights = c(figH,figH1,figH1,figH1,figH1,figH1),
              margin=input$Reference_Datasets_Summary_fig_margin )%>% 
        layout(margin=list(l = input$Reference_Datasets_Summary_margin, 
                           t = input$Reference_Datasets_Summary_margin,
                           r = input$Reference_Datasets_Summary_margin,
                           b = input$Reference_Datasets_Summary_margin)) %>% 
        layout(showlegend = as.logical(input$Reference_Datasets_Summary_showlegend)) %>% 
        layout(yaxis=list(title="Variants Number",
                          titlefont = list(size = input$Reference_Datasets_Summary_yaxisfont)
        ))
    }else{
      dat_long <- df_Reference_Datasets_Summary()
      h1 <- ggplot(data=dat_long, aes(x=plot_order, y=value, fill=variable)) +
        geom_bar(stat="identity",color="black")+
        scale_fill_brewer(palette="Paired")+
        facet_grid(~Sample, scales = 'free_x', space = 'free_x')+
        theme_tufte()+
        theme(strip.background = element_blank(), strip.text.x = element_blank())+
        labs(y="Variants Number")+
        theme(axis.text.x =  element_blank(),
              axis.title.x = element_blank(),
              axis.text.y =  element_text(size = 13,face = "bold",color = 'black'),
              axis.title.y = element_text(size = 13,face = "bold",color = 'black'))+
        theme(legend.position = "none")

      h4 <- ggplot(dat_long)+
        geom_bar(mapping = aes(x = plot_order, y = 1, fill = Caller), 
                 stat = "identity", 
                 width = 1)+
        scale_fill_brewer(palette="Paired")+
        facet_grid(~Sample, scales = 'free_x', space = 'free_x')+
        theme_void()+
        theme(strip.background = element_blank(), strip.text.x = element_blank())+
        theme(panel.spacing.x = unit(1, "mm"))+
        theme(legend.position = "none")

      h3 <- ggplot(dat_long)+
        geom_bar(mapping = aes(x = plot_order, y = 1, fill = Mapper), 
                 stat = "identity", 
                 width = 1)+
        facet_grid(~Sample, scales = 'free_x', space = 'free_x')+
        theme_void()+
        theme(strip.background = element_blank(), strip.text.x = element_blank())+
        scale_fill_brewer(palette="Set1")+
        theme(panel.spacing.x = unit(1, "mm"))+
        theme(legend.position = "none")
 
      h5 <- ggplot(dat_long)+
        geom_bar(mapping = aes(x = plot_order, y = 1, fill = Sample), 
                 stat = "identity", 
                 width = 1)+
        facet_grid(~Sample, scales = 'free_x', space = 'free_x')+
        theme_void()+
        theme(strip.background = element_blank(), strip.text.x = element_blank())+
        scale_fill_manual(values=c('#4cc3d9','#7bc8a4','#ffc65d','#f16745'))+
        theme(panel.spacing.x = unit(1, "mm"))+
        theme(legend.position = "none")
  
      h2 <- ggplot(dat_long)+
        geom_bar(mapping = aes(x = plot_order, y = 1, fill = Platform), 
                 stat = "identity", 
                 width = 1)+
        facet_grid(~Sample, scales = 'free_x', space = 'free_x')+
        theme_void()+
        theme(strip.background = element_blank(), strip.text.x = element_blank())+
        theme(panel.spacing.x = unit(1, "mm"))+
        theme(legend.position = "none")

      figH <- input$Reference_Datasets_Summary_figH
      figH1 <- (1-input$Reference_Datasets_Summary_figH)/4
      
      subplot(ggplotly(h1),ggplotly(h5),ggplotly(h4),ggplotly(h3),ggplotly(h2),
              nrows =5,heights = c(figH,figH1,figH1,figH1,figH1),
              margin=input$Reference_Datasets_Summary_fig_margin
      )%>% 
        layout(margin=list(l = input$Reference_Datasets_Summary_margin,
                           t = input$Reference_Datasets_Summary_margin,
                           r = input$Reference_Datasets_Summary_margin, 
                           b = input$Reference_Datasets_Summary_margin)) %>% 
        layout(showlegend = as.logical(input$Reference_Datasets_Summary_showlegend)) %>% 
        layout(yaxis=list(title="Variants Number",
                          titlefont = list(size = input$Reference_Datasets_Summary_yaxisfont)
        ))

    }
    
  })
  
  
  
  ####################### Large Deletion###############################
  
  
  df_Large_Deletion<- reactive(
    if(input$Large_Deletion_Variant_type=="Insertion"){
      if(input$Large_Deletion_show_type=="Variant Number"){
      readRDS("./data/DNAseq/Large_Deletion/Insertion_Variant_Number.rds")
      }else if(input$Large_Deletion_show_type=="Filtered Variant"){
        readRDS("./data/DNAseq/Large_Deletion/Insertion_filtered_variant.rds")
      }
    }else{
      if(input$Large_Deletion_show_type=="Variant Number"){
       readRDS("./data/DNAseq/Large_Deletion/Deletion_Variant_Number.rds")
      }else if(input$Large_Deletion_show_type=="Filtered Variant"){
        readRDS("./data/DNAseq/Large_Deletion/Deletion_filtered_variant.rds")
      }
    }
  )
  
  output$Large_Deletion_plot <- renderPlotly({
    if(input$Large_Deletion_show_type=="Filtered Variant"){
       p<-ggplot( df_Large_Deletion(), aes(x=gap, y=value, group=variable)) +
        geom_line(aes(color=SequencePlatform,linetype=Library))+
        geom_point(aes(color=SequencePlatform))+
        scale_color_manual(values=c('#c64b2b','#f9ce8c','#c3e3e5','#589bad'))+
        ylab(c('Percentage of Filtered Variants'))+
        xlab(c('Distance from SV breakpoints'))+
        theme_classic()+
        theme(axis.text.x = element_text(angle=90, 
                                         size=input$Large_Deletion_xy_size),
              axis.text.y = element_text( angle=90,
                                          size=input$Large_Deletion_xy_size))+
        theme(
          axis.title.x = element_text( size=input$Large_Deletion_xy_size),
          axis.title.y = element_text( size=input$Large_Deletion_xy_size)
        )+
        scale_x_continuous(breaks=seq(-10000,10000,1000))
      p <- ggplotly(p)
      p$x$layout$annotations[[1]]$text <- ""
      p %>% 
        layout(margin=list(l = input$Large_Deletion_margin,
                           t = input$Large_Deletion_margin,
                           r = input$Large_Deletion_margin, 
                           b = input$Large_Deletion_margin))
      
    }else if(input$Large_Deletion_show_type=="Variant Number"){
      p <- ggplot(data=df_Large_Deletion(), aes(x=gap, y=value, fill=type)) +
        geom_bar(stat="identity")+
        ylab(c('Number of Variants'))+
        xlab(c('Distance from SV breakpoints'))+
        theme_classic()+
        theme(axis.text.x = element_text(angle=90, 
                                         size=input$Large_Deletion_xy_size),
              axis.text.y = element_text( angle=90,
                                          size=input$Large_Deletion_xy_size))+
        theme(
          axis.title.x = element_text( size=input$Large_Deletion_xy_size),
          axis.title.y = element_text( size=input$Large_Deletion_xy_size)
        )+
        scale_x_continuous(breaks=seq(-10000,10000,1000))
      p <- ggplotly(p)
      p$x$layout$annotations[[1]]$text <- ""
      p %>% layout(margin=list(l = input$Large_Deletion_margin,
                           t = input$Large_Deletion_margin,
                           r = input$Large_Deletion_margin, 
                           b = input$Large_Deletion_margin))

    }
    
  })
  session$onSessionEnded(stopApp)
})






